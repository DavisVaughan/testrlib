# `SOURCES_PKG` are the current project's c files. These are generally
# at the top level in the `src/` directory for R packages, but they can
# also have their own folder. For example, the `proj-dir/` folder has
# additional C files used by this project.

# `SOURCES_R_LIB` contains all of the files in `r-lib/` that need to be
# tracked by make. This list is something that would be copied into a package
# that is using the `r-lib/` library.

# We set the `all` target manually because otherwise the `clean` target
# will attempt to run when a simple `make` is called because it would be
# the first target in the file.

# The `clean` target is required, because by default R's mechanism will
# clean up only `.o` files in the top level directory. Without this, a
# check() will fail with a note about `.o` files in `r-lib/` existing.

# The `PKG_CFLAGS` is optional. `-I ./r-lib/` includes the `r-lib/` header
# files in such a way that you can just `#include "r-lib.h"` from anywhere
# in the project to get access to it. Without this, at the top level you have
# to do `#include "r-lib/r-lib.h"` and in folders you'd have to do
# `#include "../r-lib/r-lib.h"`.
# NOTE: It might be clearer to do `-I .` so you always include as
# "r-lib/r-lib.h".

PKG_CFLAGS = -I ./r-lib/

SOURCES_PKG = \
	code.c \
	proj-dir/code3.c

SOURCES_R_LIB = \
	r-lib/code2.c

SOURCES = $(SOURCES_PKG) $(SOURCES_R_LIB)

OBJECTS = $(SOURCES:.c=.o)

all: $(SHLIB)

.PHONY: clean

clean:
	rm -f $(OBJECTS)
